#配置web-stat-filter
                                        enabled: true
                                        url-pattern: /*
                                        exclusions: *.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
spring.datasource.druid.stat-view-servlet.allow: 127.0.0.1
#spring.datasource.druid.stat-view-servlet.allow: 
#你可以配置principalSessionName，使得druid能够知道当前的cookie的用户是谁
                                        principal-cookie-name: admin
#你可以配置principalSessionName，使得druid能够知道当前的session的用户是谁
                                        principal-session-name: admin
#置profileEnable能够监控单个url调用的sql列表。
                                        profile-enable: true
#session统计功能
                                        session-stat-enable: true
#最大session数
                                        session-stat-max-count: 100000






#配置wall filter
spring.datasource.druid.filter.wall.enabled: true
spring.datasource.druid.filter.wall.db-type: mysql
spring.datasource.druid.filter.wall.config.alter-table-allow: false
spring.datasource.druid.filter.wall.config.truncate-allow: false
spring.datasource.druid.filter.wall.config.drop-table-allow: false
#是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
spring.datasource.druid.filter.wall.config.none-base-statement-allow: false
#检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
spring.datasource.druid.filter.wall.config.update-where-none-check: true
#SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
spring.datasource.druid.filter.wall.config.select-into-outfile-allow: false
#是否允许调用Connection.getMetadata方法，这个方法调用会暴露数据库的表信息
spring.datasource.druid.filter.wall.config.metadata-allow: true
#对被认为是攻击的SQL进行LOG.error输出
spring.datasource.druid.filter.wall.log-violation: true
#对被认为是攻击的SQL抛出SQLExcepton
spring.datasource.druid.filter.wall.throw-exception: true




#配置spring关联
#设置使用Cglib进行代理，因为部分需要代理的不是接口不适用于JDK动态代理，会报错
spring.aop.proxy-target-class: true
#配置Druid监控Spring包方法的调用
spring.datasource.druid.aop-patterns: packages